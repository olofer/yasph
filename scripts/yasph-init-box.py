#
# Demo generator of initial state files to be used with the YASPH executable.
# Sets up an initial unit box of air at room temperature and atmospheric pressure.
#
# Generates:
#  1. configuration file
#  2. particle data file
#
# EXAMPLE:
#   python yasph-init-box.py --n 2000 --particle-file state.yasph --parameter-file params.yasph
#   ./yasph state.yasph params.yasph
#

import numpy as np
import argparse

def make_polygon_vertices(n, R, alfa):
  V = np.tile(np.nan, (n, 2))
  for i in range(n):
    V[i, 0] = np.cos(alfa + (2 * np.pi * i) / n) * R 
    V[i, 1] = np.sin(alfa + (2 * np.pi * i) / n) * R
  return V 

if __name__ == '__main__':

  parser = argparse.ArgumentParser()

  parser.add_argument('--n', type = int, default = 1000, help = 'number of particles')
  parser.add_argument('--particle-file', type = str, default = 'state.yasph', help = 'name of file with particle data')
  parser.add_argument('--parameter-file', type = str, default = 'params.yasph', help = 'name of file with parameter data')
  parser.add_argument('--density', type = float, default = 1.225, help = 'nominal density')
  parser.add_argument('--pressure', type = float, default = 101.325e3, help = 'nominal pressure')
  parser.add_argument('--adiabatic-index', type = float, default = 5.0 / 3.0, help = 'adiabatic index')
  parser.add_argument('--xmin', type = float, default = 0.0)
  parser.add_argument('--xmax', type = float, default = 1.0)
  parser.add_argument('--ymin', type = float, default = 0.0)
  parser.add_argument('--ymax', type = float, default = 1.0)
  parser.add_argument('--vx', type = float, default = 0.0, help = 'initial common velocity (x)')
  parser.add_argument('--vy', type = float, default = 0.0, help = 'initial common velocity (y)')
  parser.add_argument('--omega', type = float, default = 0.0, help = 'initial angular velocity (around CM)') 
  parser.add_argument('--barrier-n', type = int, default = 6, help = 'barrier polygon number of vertices')
  parser.add_argument('--barrier-radius', type = float, default = 0.0, help = 'radius for barrier vertices')
  parser.add_argument('--barrier-alpha', type = float, default = 0.0, help = 'angular offset for barrier vertices')

  args = parser.parse_args()

  assert len(args.particle_file) > 0
  assert len(args.parameter_file) > 0
  assert args.n > 0

  assert args.density > 0
  assert args.pressure > 0

  xw = args.xmax - args.xmin
  yw = args.ymax - args.ymin

  assert xw > 0 and yw > 0

  with open(args.parameter_file, 'w') as cfgfile:
    cfgfile.write('=== generated by: {} ===\n'.format(__file__)) 
    cfgfile.write('gamma={}\n'.format(args.adiabatic_index))
    if args.barrier_radius > 0:
      assert args.barrier_n >= 3
      V = make_polygon_vertices(args.barrier_n, args.barrier_radius, args.barrier_alpha)
      for i in range(args.barrier_n):
        x0 = V[i, 0]
        y0 = V[i, 1]
        x1 = V[(i + 1) % args.barrier_n, 0]
        y1 = V[(i + 1) % args.barrier_n, 1]
        cfgfile.write('barrier-wall:{}={},{},{},{}\n'.format(i, x0, y0, x1, y1))

  A = xw * yw
  M = A * args.density / args.n
  U = args.pressure / ((args.adiabatic_index - 1) * args.density) 

  x = args.xmin + xw * np.random.rand(args.n)
  y = args.ymin + yw * np.random.rand(args.n)
  vx = np.tile(args.vx, (args.n, ))
  vy = np.tile(args.vy, (args.n, ))
  u = np.tile(U, (args.n, ))
  m = np.tile(M, (args.n, ))

  if args.omega != 0.0:
    cmx = np.mean(x)
    cmy = np.mean(y)
    rx = x - cmx
    ry = y - cmy 
    vx += args.omega * (-ry)
    vy += args.omega * (rx)

  dat = np.tile(np.nan, (args.n, 6))
  dat[:, 0] = x
  dat[:, 1] = y
  dat[:, 2] = vx
  dat[:, 3] = vy
  dat[:, 4] = u
  dat[:, 5] = m

  assert np.all(np.isfinite(dat))

  np.savetxt(args.particle_file, 
             dat, 
             delimiter = ',', 
             header = 'generated by: {}'.format(__file__),
             footer = 'column order: x, y, vx, vy, u, m')
