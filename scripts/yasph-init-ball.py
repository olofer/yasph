#
# Generate particle file (and parameter file) for a list of pressures and densities.
# Set number of particles are generated for each type of gas (density, pressue).
# All gases are evenly spread within a ball of set radius.
#

import numpy as np
import argparse

def generate_xy(n, R):
  x = np.tile(np.nan, (n, ))
  y = np.tile(np.nan, (n, ))
  c = 0
  while c < n:
    xr = (np.random.rand() * 2.0 - 1.0) * R
    yr = (np.random.rand() * 2.0 - 1.0) * R
    if xr * xr + yr * yr < R * R:
      x[c] = xr
      y[c] = yr
      c += 1
  return x, y

# approximately n points; square lattice (jittered)
def generate_xy_lattice(n, R, ofsx = 0.0, ofsy = 0.0, jitter = 0.01):
  x = np.tile(np.nan, (2 * n, ))
  y = np.tile(np.nan, (2 * n, ))
  Q = np.pi * R * R / (4 * R * R)
  N = np.ceil(n / Q)
  P = int(np.ceil(np.sqrt(N)))
  a = 2.0 * R / P
  assert ofsx >= 0 and ofsx < 1
  assert ofsy >= 0 and ofsy < 1
  c = 0
  for i in range(P):
    xi = i * a * R - R + ofsx * a
    for j in range(P):
      yj = j * a * R - R + ofsy * a
      xc = xi + jitter * a * np.random.randn()
      yc = yj + jitter * a * np.random.randn()
      if xc * xc + yc * yc < R * R:
        x[c] = xc
        y[c] = yc
        c += 1
  return x[:c], y[:c]

def make_table(x, y, density, pressure, area, gamma):
  n = x.shape[0]
  assert y.shape[0] == n
  M = area * density / n
  U = pressure / ((gamma - 1) * density) 
  dat = np.tile(np.nan, (n, 6))
  dat[:, 0] = x
  dat[:, 1] = y
  dat[:, 2] = np.zeros((n, ))
  dat[:, 3] = np.zeros((n, ))
  dat[:, 4] = np.tile(U, (n, ))
  dat[:, 5] = np.tile(M, (n, ))
  return dat

if __name__ == '__main__':

  parser = argparse.ArgumentParser()

  parser.add_argument('--num-per-gas', type = int, default = 1000, help = 'number of particles (per species)')
  parser.add_argument('--particle-file', type = str, default = 'state-ball.yasph', help = 'name of file with particle data')
  parser.add_argument('--parameter-file', type = str, default = 'params-ball.yasph', help = 'name of file with parameter data')
  parser.add_argument('--density', type = float, nargs = '+', help = 'list of densities (kg/m^3)')
  parser.add_argument('--pressure', type = float, nargs = '+', help = 'list of pressures (Pa)')
  parser.add_argument('--adiabatic-index', type = float, default = 5.0 / 3.0, help = 'adiabatic index')
  parser.add_argument('--barrier-radius', type = float, default = 1.0)
  parser.add_argument('--lattice', action = 'store_true')

  args = parser.parse_args()

  assert len(args.density) == len(args.pressure)
  assert len(args.density) > 0
  assert args.num_per_gas > 0
  assert args.barrier_radius > 0

  G = len(args.density)
  NPG = args.num_per_gas
  R = args.barrier_radius

  D = np.tile(0, (0, 6))

  for g in range(G):
    if args.lattice:
      xg, yg = generate_xy_lattice(NPG, R, g / G, g / G)
    else:
      xg, yg = generate_xy(NPG, R)
    assert np.all(np.isfinite(xg)) and np.all(np.isfinite(yg))
    datg = make_table(xg, yg, args.density[g], args.pressure[g], np.pi * R * R, args.adiabatic_index)
    print('P={}, rho={}'.format(args.pressure[g], args.density[g]))
    D = np.vstack((D, datg))
  
  print(D.shape)

  if len(args.parameter_file) > 0:
    with open(args.parameter_file, 'w') as cfgfile:
      cfgfile.write('=== generated by: {} ===\n'.format(__file__)) 
      cfgfile.write('gamma={}\n'.format(args.adiabatic_index))
      cfgfile.write('barrier-ball:{}={},{},{}\n'.format(0, 0.0, 0.0, R))

  if len(args.particle_file) > 0:
    np.savetxt(args.particle_file, 
               D, 
               delimiter = ',', 
               header = 'generated by: {}'.format(__file__),
               footer = 'column order: x, y, vx, vy, u, m')

